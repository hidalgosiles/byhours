<?php

namespace Proxies\__CG__\Diagomail\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Invoice extends \Diagomail\AppBundle\Entity\Invoice implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'id', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'number', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'url', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'routeS3', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'user', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'creationDate', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'invoiceDate', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'amount', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'vatRate', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'reason', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'currency', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'accountType', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'paid', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'dedicatedIpTransaction', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'creditBalanceTransaction'];
        }

        return ['__isInitialized__', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'id', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'number', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'url', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'routeS3', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'user', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'creationDate', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'invoiceDate', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'amount', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'vatRate', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'reason', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'currency', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'accountType', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'paid', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'dedicatedIpTransaction', '' . "\0" . 'Diagomail\\AppBundle\\Entity\\Invoice' . "\0" . 'creditBalanceTransaction'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Invoice $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNumber($number)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumber', [$number]);

        return parent::setNumber($number);
    }

    /**
     * {@inheritDoc}
     */
    public function getNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumber', []);

        return parent::getNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setRouteS3($routeS3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRouteS3', [$routeS3]);

        return parent::setRouteS3($routeS3);
    }

    /**
     * {@inheritDoc}
     */
    public function getRouteS3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRouteS3', []);

        return parent::getRouteS3();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationDate($creationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationDate', [$creationDate]);

        return parent::setCreationDate($creationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationDate', []);

        return parent::getCreationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Diagomail\UsersBundle\Entity\Users $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmount($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmount', [$amount]);

        return parent::setAmount($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmount', []);

        return parent::getAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function setPaid($paid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPaid', [$paid]);

        return parent::setPaid($paid);
    }

    /**
     * {@inheritDoc}
     */
    public function getPaid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPaid', []);

        return parent::getPaid();
    }

    /**
     * {@inheritDoc}
     */
    public function addDedicatedIpTransaction(\Diagomail\AppBundle\Entity\DedicatedIpTransaction $dedicatedIpTransaction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDedicatedIpTransaction', [$dedicatedIpTransaction]);

        return parent::addDedicatedIpTransaction($dedicatedIpTransaction);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDedicatedIpTransaction(\Diagomail\AppBundle\Entity\DedicatedIpTransaction $dedicatedIpTransaction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDedicatedIpTransaction', [$dedicatedIpTransaction]);

        return parent::removeDedicatedIpTransaction($dedicatedIpTransaction);
    }

    /**
     * {@inheritDoc}
     */
    public function getDedicatedIpTransaction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDedicatedIpTransaction', []);

        return parent::getDedicatedIpTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function addCreditBalanceTransaction(\Diagomail\AppBundle\Entity\CreditBalanceTransaction $creditBalanceTransaction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCreditBalanceTransaction', [$creditBalanceTransaction]);

        return parent::addCreditBalanceTransaction($creditBalanceTransaction);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCreditBalanceTransaction(\Diagomail\AppBundle\Entity\CreditBalanceTransaction $creditBalanceTransaction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCreditBalanceTransaction', [$creditBalanceTransaction]);

        return parent::removeCreditBalanceTransaction($creditBalanceTransaction);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreditBalanceTransaction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreditBalanceTransaction', []);

        return parent::getCreditBalanceTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function setVatRate($vatRate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVatRate', [$vatRate]);

        return parent::setVatRate($vatRate);
    }

    /**
     * {@inheritDoc}
     */
    public function getVatRate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVatRate', []);

        return parent::getVatRate();
    }

    /**
     * {@inheritDoc}
     */
    public function setInvoiceDate($invoiceDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInvoiceDate', [$invoiceDate]);

        return parent::setInvoiceDate($invoiceDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getInvoiceDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInvoiceDate', []);

        return parent::getInvoiceDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccountType(\Diagomail\UsersBundle\Entity\AccountType $accountType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccountType', [$accountType]);

        return parent::setAccountType($accountType);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccountType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccountType', []);

        return parent::getAccountType();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrency(\Diagomail\AppBundle\Entity\Currency $currency = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrency', [$currency]);

        return parent::setCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrency()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrency', []);

        return parent::getCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function setReason($reason)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReason', [$reason]);

        return parent::setReason($reason);
    }

    /**
     * {@inheritDoc}
     */
    public function getReason()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReason', []);

        return parent::getReason();
    }

}
